diff --git a/proc.c b/proc.c
index 806b1b1..2019e17 100644
--- a/proc.c
+++ b/proc.c
@@ -88,6 +88,7 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->oldsz = 0;
 
   release(&ptable.lock);
 
@@ -531,4 +532,4 @@ procdump(void)
     }
     cprintf("\n");
   }
-}
+}
\ No newline at end of file
diff --git a/proc.h b/proc.h
index 1647114..721cb02 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  uint oldsz;                  // size before allocation in lazy allocation
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/trap.c b/trap.c
index 41c66eb..b3db496 100644
--- a/trap.c
+++ b/trap.c
@@ -7,31 +7,33 @@
 #include "x86.h"
 #include "traps.h"
 #include "spinlock.h"
-
+ 
 // Interrupt descriptor table (shared by all CPUs).
 struct gatedesc idt[256];
 extern uint vectors[];  // in vectors.S: array of 256 entry pointers
 struct spinlock tickslock;
 uint ticks;
-
+ 
+extern int mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm);
+ 
 void
 tvinit(void)
 {
   int i;
-
+ 
   for(i = 0; i < 256; i++)
     SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-
+ 
   initlock(&tickslock, "time");
 }
-
+ 
 void
 idtinit(void)
 {
   lidt(idt, sizeof(idt));
 }
-
+ 
 //PAGEBREAK: 41
 void
 trap(struct trapframe *tf)
@@ -45,7 +47,7 @@ trap(struct trapframe *tf)
       exit();
     return;
   }
-
+ 
   switch(tf->trapno){
   case T_IRQ0 + IRQ_TIMER:
     if(cpuid() == 0){
@@ -77,7 +79,7 @@ trap(struct trapframe *tf)
             cpuid(), tf->cs, tf->eip);
     lapiceoi();
     break;
-
+ 
   //PAGEBREAK: 13
   default:
     if(myproc() == 0 || (tf->cs&3) == 0){
@@ -86,6 +88,32 @@ trap(struct trapframe *tf)
               tf->trapno, cpuid(), tf->eip, rcr2());
       panic("trap");
     }
+    if(rcr2() > myproc()->sz){
+        cprintf("Unhandled Page Fault \n");
+    }
+    else {   
+        if(tf->trapno == T_PGFLT)
+        {
+            char *mem;
+            uint a;
+            if(myproc()->sz < myproc()->oldsz){
+                return;
+            }
+            
+            a = PGROUNDDOWN(rcr2());
+            mem = kalloc();
+            if(mem == 0){
+                cprintf("allocuvm out of memory \n");
+                myproc()->killed = 1;
+                return;
+            }
+            
+            memset(mem, 0, PGSIZE);
+            mappages(myproc()->pgdir, (char*) a, PGSIZE, V2P(mem), PTE_W|PTE_U);
+            break; 
+        }
+    }
+    
     // In user space, assume process misbehaved.
     cprintf("pid %d %s: trap %d err %d on cpu %d "
             "eip 0x%x addr 0x%x--kill proc\n",
@@ -93,20 +121,33 @@ trap(struct trapframe *tf)
             tf->err, cpuid(), tf->eip, rcr2());
     myproc()->killed = 1;
   }
-
+ 
   // Force process exit if it has been killed and is in user space.
   // (If it is still executing in the kernel, let it keep running
   // until it gets to the regular system call return.)
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
     exit();
-
+ 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
+  
+  #ifdef SJF
+  //no context switch
+  #else
+  #ifdef DEFAULT
   if(myproc() && myproc()->state == RUNNING &&
      tf->trapno == T_IRQ0+IRQ_TIMER)
     yield();
-
+  #else
+  #ifdef HBSJF 
+  if(myproc() && myproc()->state == RUNNING &&
+     tf->trapno == T_IRQ0+IRQ_TIMER && time_checker())
+    yield();
+  #endif
+  #endif
+  #endif  
+ 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
     exit();
-}
+}
\ No newline at end of file
diff --git a/vm.c b/vm.c
index 7134cff..0275cec 100644
--- a/vm.c
+++ b/vm.c
@@ -57,7 +57,7 @@ walkpgdir(pde_t *pgdir, const void *va, int alloc)
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned.
-static int
+int
 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
 {
   char *a, *last;
