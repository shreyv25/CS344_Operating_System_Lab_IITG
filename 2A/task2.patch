diff --git a/Makefile b/Makefile
index 09d790c..dc96376 100644
--- a/Makefile
+++ b/Makefile
@@ -70,6 +70,9 @@ QEMU = $(shell if which qemu > /dev/null; \
 	echo "*** or have you tried setting the QEMU variable in Makefile?" 1>&2; \
 	echo "***" 1>&2; exit 1)
 endif
+ifndef SCHEDFLAG
+SCHEDFLAG := DEFAULT
+endif
 
 CC = $(TOOLPREFIX)gcc
 AS = $(TOOLPREFIX)gas
@@ -78,6 +81,7 @@ OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
 CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
+CFLAGS += -D $(SCHEDFLAG)
 ASFLAGS = -m32 -gdwarf-2 -Wa,-divide
 # FreeBSD ld wants ``elf_i386_fbsd''
 LDFLAGS += -m $(shell $(LD) -V | grep elf_i386 2>/dev/null | head -n 1)
@@ -181,6 +185,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_testing\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -250,6 +255,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
+	testing.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
diff --git a/console.c b/console.c
index a280d2b..4bcb634 100644
--- a/console.c
+++ b/console.c
@@ -1,7 +1,7 @@
 // Console input and output.
 // Input is from the keyboard or serial port.
 // Output is written to the screen and serial port.
-
+#include "console.h"
 #include "types.h"
 #include "defs.h"
 #include "param.h"
@@ -124,8 +124,7 @@ panic(char *s)
 }
 
 //PAGEBREAK: 50
-#define BACKSPACE 0x100
-#define CRTPORT 0x3d4
+
 static ushort *crt = (ushort*)P2V(0xb8000);  // CGA memory
 
 static void
@@ -139,13 +138,19 @@ cgaputc(int c)
   outb(CRTPORT, 15);
   pos |= inb(CRTPORT+1);
 
-  if(c == '\n')
-    pos += 80 - pos%80;
-  else if(c == BACKSPACE){
-    if(pos > 0) --pos;
-  } else
-    crt[pos++] = (c&0xff) | 0x0700;  // black on white
-
+  switch(c) {
+    case '\n':
+      pos += 80 - pos%80;
+      break;
+    case BACKSPACE:
+      if(pos > 0) --pos;
+      break;
+    case LEFT_ARROW:
+      if(pos > 0) --pos;
+      break;
+    default:
+      crt[pos++] = (c&0xff) | 0x0700;  // black on white
+  }
   if(pos < 0 || pos > 25*80)
     panic("pos under/overflow");
 
@@ -159,9 +164,11 @@ cgaputc(int c)
   outb(CRTPORT+1, pos>>8);
   outb(CRTPORT, 15);
   outb(CRTPORT+1, pos);
-  crt[pos] = ' ' | 0x0700;
+    if (c == BACKSPACE)
+    crt[pos] = ' ' | 0x0700;
 }
 
+
 void
 consputc(int c)
 {
@@ -171,60 +178,216 @@ consputc(int c)
       ;
   }
 
-  if(c == BACKSPACE){
-    uartputc('\b'); uartputc(' '); uartputc('\b');
-  } else
-    uartputc(c);
-  cgaputc(c);
+  switch (c) {
+    case BACKSPACE:
+      uartputc('\b'); uartputc(' '); uartputc('\b');
+      break;
+    case LEFT_ARROW:
+      uartputc('\b');
+      break;
+    default:
+      uartputc(c);
+  }
+  // cgaputc prints to QEMU's terminal
+    cgaputc(c);
 }
 
-#define INPUT_BUF 128
 struct {
   char buf[INPUT_BUF];
   uint r;  // Read index
   uint w;  // Write index
   uint e;  // Edit index
+  uint rightmost;
 } input;
 
+char charsToBeMoved[INPUT_BUF];  
+
+
+struct {
+  char bufferArr[MAX_HISTORY][INPUT_BUF]; 
+  uint lengthsArr[MAX_HISTORY]; 
+  uint lastCommandIndex;  
+  int numOfCommmandsInMem; 
+  int currentHistory;
+} historyBufferArray;
+
+char oldBuf[INPUT_BUF];
+uint lengthOfOldBuf;
+
+char buf2[INPUT_BUF];
+
 #define C(x)  ((x)-'@')  // Control-x
 
+void copyCharsToBeMoved() {
+  uint n = input.rightmost - input.r;
+  uint i;
+  for (i = 0; i < n; i++)
+  charsToBeMoved[i] = input.buf[(input.r + i) % INPUT_BUF];
+}
+
+void shiftbufright() {
+  uint n = input.rightmost - input.e;
+  int i;
+  for (i = 0; i < n; i++) {
+    char c = charsToBeMoved[i];
+    input.buf[(input.e + i) % INPUT_BUF] = c;
+    consputc(c);
+  }
+  memset(charsToBeMoved, '\0', INPUT_BUF);
+  for (i = 0; i < n; i++) {
+    consputc(LEFT_ARROW);
+  }
+}
+
+void shiftbufleft() {
+  uint n = input.rightmost - input.e;
+  uint i;
+  consputc(LEFT_ARROW);
+  input.e--;
+  for (i = 0; i < n; i++) {
+    char c = input.buf[(input.e + i + 1) % INPUT_BUF];
+    input.buf[(input.e + i) % INPUT_BUF] = c;
+    consputc(c);
+  }
+  input.rightmost--;
+  consputc(' '); 
+  for (i = 0; i <= n; i++) {
+    consputc(LEFT_ARROW); 
+  }
+}
+
 void
 consoleintr(int (*getc)(void))
 {
   int c, doprocdump = 0;
-
+  uint tempIndex;
   acquire(&cons.lock);
   while((c = getc()) >= 0){
     switch(c){
     case C('P'):  // Process listing.
-      // procdump() locks cons.lock indirectly; invoke later
-      doprocdump = 1;
-      break;
-    case C('U'):  // Kill line.
-      while(input.e != input.w &&
-            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
-        input.e--;
-        consputc(BACKSPACE);
-      }
-      break;
-    case C('H'): case '\x7f':  // Backspace
-      if(input.e != input.w){
-        input.e--;
-        consputc(BACKSPACE);
-      }
-      break;
-    default:
-      if(c != 0 && input.e-input.r < INPUT_BUF){
-        c = (c == '\r') ? '\n' : c;
-        input.buf[input.e++ % INPUT_BUF] = c;
-        consputc(c);
-        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
-          input.w = input.e;
-          wakeup(&input.r);
+        doprocdump = 1;   // procdump() locks cons.lock indirectly; invoke later
+        break;
+      case C('U'):  // Kill line.
+        if (input.rightmost > input.e) { // caret isn't at the end of the line
+          uint numtoshift = input.rightmost - input.e;
+          uint placestoshift = input.e - input.w;
+          uint i;
+          for (i = 0; i < placestoshift; i++) {
+            consputc(LEFT_ARROW);
+          }
+          memset(buf2, '\0', INPUT_BUF);
+          for (i = 0; i < numtoshift; i++) {
+            buf2[i] = input.buf[(input.w + i + placestoshift) % INPUT_BUF];
+          }
+          for (i = 0; i < numtoshift; i++) {
+            input.buf[(input.w + i) % INPUT_BUF] = buf2[i];
+          }
+          input.e -= placestoshift;
+          input.rightmost -= placestoshift;
+          for (i = 0; i < numtoshift; i++) { // repaint the chars
+            consputc(input.buf[(input.e + i) % INPUT_BUF]);
+          }
+          for (i = 0; i < placestoshift; i++) { // erase the leftover chars
+            consputc(' ');
+          }
+          for (i = 0; i < placestoshift + numtoshift; i++) { // move the caret back to the left
+            consputc(LEFT_ARROW);
+          }
         }
+        else { // caret is at the end of the line -                                       ( deleting everything from both screen and inputbuf)
+          while(input.e != input.w &&
+                input.buf[(input.e - 1) % INPUT_BUF] != '\n'){
+            input.e--;
+            input.rightmost--;
+            consputc(BACKSPACE);
+          }
+        }
+        break;
+      case C('H'): case '\x7f':  // Backspace
+        if (input.rightmost != input.e && input.e != input.w) { // caret isn't at the end of the line
+          shiftbufleft();
+          break;
+        }
+        if(input.e != input.w){ // caret is at the end of the line - deleting last char
+          input.e--;
+          input.rightmost--;
+          consputc(BACKSPACE);
+        }
+        break;
+      case LEFT_ARROW:
+        if (input.e != input.w) {
+          input.e--;
+          consputc(c);
+        }
+        break;
+      case RIGHT_ARROW:
+        if (input.e < input.rightmost) {
+          consputc(input.buf[input.e % INPUT_BUF]);
+          input.e++;
+        }
+        else if (input.e == input.rightmost){
+          consputc(' ');
+          consputc(LEFT_ARROW);
+        }
+        break;
+      case UP_ARROW:
+       if (historyBufferArray.currentHistory < historyBufferArray.numOfCommmandsInMem-1 ){ // current history means the oldest possible will be MAX_HISTORY-1
+          earaseCurrentLineOnScreen();
+          if (historyBufferArray.currentHistory == -1)
+              copyCharsToBeMovedToOldBuf();
+          earaseContentOnInputBuf();
+          historyBufferArray.currentHistory++;
+          tempIndex = (historyBufferArray.lastCommandIndex + historyBufferArray.currentHistory) %MAX_HISTORY;
+          copyBufferToScreen(historyBufferArray.bufferArr[ tempIndex]  , historyBufferArray.lengthsArr[tempIndex]);
+          copyBufferToInputBuf(historyBufferArray.bufferArr[ tempIndex]  , historyBufferArray.lengthsArr[tempIndex]);
+        }
+        break;
+      case DOWN_ARROW:
+        switch(historyBufferArray.currentHistory){
+          case -1:
+            //does nothing
+            break;
+          case 0: //get string from old buf
+            earaseCurrentLineOnScreen();
+            copyBufferToInputBuf(oldBuf, lengthOfOldBuf);
+            copyBufferToScreen(oldBuf, lengthOfOldBuf);
+            historyBufferArray.currentHistory--;
+            break;
+          default:
+            earaseCurrentLineOnScreen();
+            historyBufferArray.currentHistory--;
+            tempIndex = (historyBufferArray.lastCommandIndex + historyBufferArray.currentHistory)%MAX_HISTORY;
+            copyBufferToScreen(historyBufferArray.bufferArr[ tempIndex]  , historyBufferArray.lengthsArr[tempIndex]);
+            copyBufferToInputBuf(historyBufferArray.bufferArr[ tempIndex]  , historyBufferArray.lengthsArr[tempIndex]);
+            break;
+        }
+        break;
+      case '\n':
+      case '\r':
+          input.e = input.rightmost;
+      default:
+        if(c != 0 && input.e-input.r < INPUT_BUF){
+          c = (c == '\r') ? '\n' : c;
+          if (input.rightmost > input.e) { // caret isn't at the end of the line
+            copyCharsToBeMoved();
+            input.buf[input.e++ % INPUT_BUF] = c;
+            input.rightmost++;
+            consputc(c);
+            shiftbufright();
+          }
+          else {
+            input.buf[input.e++ % INPUT_BUF] = c;
+            input.rightmost = input.e - input.rightmost == 1 ? input.e : input.rightmost;
+            consputc(c);
+          }
+          if(c == '\n' || c == C('D') || input.rightmost == input.r + INPUT_BUF){
+            saveCommandInHistory();
+            input.w = input.rightmost;
+            wakeup(&input.r);
+          }
+        }
+        break;
       }
-      break;
-    }
   }
   release(&cons.lock);
   if(doprocdump) {
@@ -232,6 +395,74 @@ consoleintr(int (*getc)(void))
   }
 }
 
+void
+earaseCurrentLineOnScreen(void){
+    uint numToEarase = input.rightmost - input.r;
+    uint i;
+    for (i = 0; i < numToEarase; i++) {
+      consputc(BACKSPACE);
+    }
+}
+
+void
+copyCharsToBeMovedToOldBuf(void){
+    lengthOfOldBuf = input.rightmost - input.r;
+    uint i;
+    for (i = 0; i < lengthOfOldBuf; i++) {
+        oldBuf[i] = input.buf[(input.r+i)%INPUT_BUF];
+    }
+}
+
+void
+earaseContentOnInputBuf(){
+  input.rightmost = input.r;
+  input.e = input.r;
+}
+
+void
+copyBufferToScreen(char * bufToPrintOnScreen, uint length){
+  uint i;
+  for (i = 0; i < length; i++) {
+    consputc(bufToPrintOnScreen[i]);
+  }
+}
+
+void
+copyBufferToInputBuf(char * bufToSaveInInput, uint length){
+  uint i;
+  for (i = 0; i < length; i++) {
+    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
+  }
+  input.e = input.r+length;
+  input.rightmost = input.e;
+}
+
+void
+saveCommandInHistory(){
+  historyBufferArray.currentHistory= -1;//reseting the users history current viewed
+  if (historyBufferArray.numOfCommmandsInMem < MAX_HISTORY)
+    historyBufferArray.numOfCommmandsInMem++; //when we get to MAX_HISTORY commands in memory we keep on inserting to the array in a circular mution
+  uint l = input.rightmost-input.r -1;
+  historyBufferArray.lastCommandIndex = (historyBufferArray.lastCommandIndex - 1)%MAX_HISTORY;
+  historyBufferArray.lengthsArr[historyBufferArray.lastCommandIndex] = l;
+  uint i;
+  for (i = 0; i < l; i++) { //do not want to save in memory the last char '/n'
+    historyBufferArray.bufferArr[historyBufferArray.lastCommandIndex][i] =  input.buf[(input.r+i)%INPUT_BUF];
+  }
+
+}
+
+int history(char *buffer, int historyId) {
+  if (historyId < 0 || historyId > MAX_HISTORY - 1)
+    return -2;
+  if (historyId >= historyBufferArray.numOfCommmandsInMem )
+    return -1;
+  memset(buffer, '\0', INPUT_BUF);
+  int tempIndex = (historyBufferArray.lastCommandIndex + historyId) % MAX_HISTORY;
+  memmove(buffer, historyBufferArray.bufferArr[tempIndex], historyBufferArray.lengthsArr[tempIndex]);
+  return 0;
+}
+
 int
 consoleread(struct inode *ip, char *dst, int n)
 {
@@ -295,5 +526,7 @@ consoleinit(void)
   cons.locking = 1;
 
   ioapicenable(IRQ_KBD, 0);
+  historyBufferArray.numOfCommmandsInMem=0;
+  historyBufferArray.lastCommandIndex=0;
 }
 
diff --git a/defs.h b/defs.h
index 82fb982..3183dda 100644
--- a/defs.h
+++ b/defs.h
@@ -10,6 +10,9 @@ struct sleeplock;
 struct stat;
 struct superblock;
 
+#define INPUT_BUF 128
+#define MAX_HISTORY 16
+
 // bio.c
 void            binit(void);
 struct buf*     bread(uint, uint);
@@ -21,6 +24,7 @@ void            consoleinit(void);
 void            cprintf(char*, ...);
 void            consoleintr(int(*)(void));
 void            panic(char*) __attribute__((noreturn));
+int             history(char *, int );
 
 // exec.c
 int             exec(char*, char**);
@@ -118,6 +122,7 @@ void            setproc(struct proc*);
 void            sleep(void*, struct spinlock*);
 void            userinit(void);
 int             wait(void);
+int             wait2(int*, int*, int*);
 void            wakeup(void*);
 void            yield(void);
 
diff --git a/param.h b/param.h
index a7e90ef..bd56098 100644
--- a/param.h
+++ b/param.h
@@ -11,4 +11,4 @@
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       1000  // size of file system in blocks
-
+#define QUANTA 		 5
diff --git a/proc.c b/proc.c
index 806b1b1..7866264 100644
--- a/proc.c
+++ b/proc.c
@@ -88,7 +88,7 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-
+  p->ctime = ticks;
   release(&ptable.lock);
 
   // Allocate kernel stack.
@@ -130,6 +130,7 @@ userinit(void)
     panic("userinit: out of memory?");
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
   p->sz = PGSIZE;
+  p->ctime = ticks;
   memset(p->tf, 0, sizeof(*p->tf));
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
@@ -202,7 +203,7 @@ fork(void)
 
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
-
+  np->ctime = ticks;  // set the new process's creation time
   for(i = 0; i < NOFILE; i++)
     if(curproc->ofile[i])
       np->ofile[i] = filedup(curproc->ofile[i]);
@@ -310,7 +311,14 @@ wait(void)
     sleep(curproc, &ptable.lock);  //DOC: wait-sleep
   }
 }
-
+int wait2(int *retime, int *rutime, int *stime) {
+  struct proc *p = myproc();
+  int res = wait();
+  *retime = p->retime;
+  *rutime = p->rutime;
+  *stime = p->stime;
+  return res;
+}
 //PAGEBREAK: 42
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
@@ -332,6 +340,7 @@ scheduler(void)
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+     #ifdef DEFAULT
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
@@ -350,6 +359,7 @@ scheduler(void)
       // It should have changed its p->state before coming back.
       c->proc = 0;
     }
+     #endif
     release(&ptable.lock);
 
   }
@@ -532,3 +542,23 @@ procdump(void)
     cprintf("\n");
   }
 }
+void updatestatistics() {
+  struct proc *p;
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    switch(p->state) {
+      case SLEEPING:
+        p->stime++;
+        break;
+      case RUNNABLE:
+        p->retime++;
+        break;
+      case RUNNING:
+        p->rutime++;
+        break;
+      default:
+        ;
+    }
+  }
+  release(&ptable.lock);
+}
\ No newline at end of file
diff --git a/proc.h b/proc.h
index 1647114..cc3cd77 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,13 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  uint ctime;                   // Process creation time
+  int stime;                   //process SLEEPING time
+  int retime;                  //process READY(RUNNABLE) time
+  int rutime;  
+    int priority;
+  int tickcounter;
+  char fake[8];
 };
 
 // Process memory is laid out contiguously, low addresses first:
@@ -56,3 +63,4 @@ struct proc {
 //   original data and bss
 //   fixed-size stack
 //   expandable heap
+void updatestatistics();
\ No newline at end of file
diff --git a/sh.c b/sh.c
index 054bab9..dd361c5 100644
--- a/sh.c
+++ b/sh.c
@@ -49,9 +49,24 @@ struct backcmd {
   struct cmd *cmd;
 };
 
-int fork1(void);  // Fork but panics on failure.
+int fork1(void);  
 void panic(char*);
 struct cmd *parsecmd(char*);
+char cmdFromHistory[INPUT_BUF];
+
+
+void history1() {
+  int i, count = 0;
+  for (i = 0; i < MAX_HISTORY; i++) {
+    if (history(cmdFromHistory, MAX_HISTORY-i-1) == 0) { //this is the sys call
+      count++;
+      if (count < 10)
+        printf(1, " %d: %s\n", count, cmdFromHistory);
+      else
+        printf(1, "%d: %s\n", count, cmdFromHistory);
+    }
+  }
+}
 
 // Execute cmd.  Never returns.
 void
@@ -144,9 +159,22 @@ getcmd(char *buf, int nbuf)
 int
 main(void)
 {
-  static char buf[100];
+  printf(1, "Selected scheduling policy: ");
+  #ifdef DEFAULT
+    printf(1, "default\n");
+  #endif
+  #ifdef FCFS
+    printf(1, "FCFS\n");
+  #endif
+  #ifdef SML
+    printf(1, "SML\n");
+  #endif
+  #ifdef DML
+    printf(1, "DML\n");
+  #endif
+  static char buf[INPUT_BUF];
   int fd;
-
+  int retime, rutime, stime,pid;
   // Ensure that three file descriptors are open.
   while((fd = open("console", O_RDWR)) >= 0){
     if(fd >= 3){
@@ -164,9 +192,23 @@ main(void)
         printf(2, "cannot cd %s\n", buf+3);
       continue;
     }
-    if(fork1() == 0)
+    if(buf[0] == 'h' && buf[1] == 'i' && buf[2] == 's' && buf[3] == 't'
+        && buf[4] == 'o' && buf[5] == 'r' && buf[6] == 'y') {
+      history1();
+      continue;
+    }
+        if (buf[0] == 'g' && buf[1] == 'e' && buf[2] == 't' && buf[3] == 'p'
+        && buf[4] == 'i' && buf[5] == 'd') {
+      printf(1, "Process ID: %d\n", getpid());
+      continue;
+    }
+  if(fork1() == 0)
       runcmd(parsecmd(buf));
-    wait();
+      else {
+    // wait();
+    pid = wait2(&retime, &rutime, &stime);
+    printf(1, "pid:%d retime:%d rutime%d stime:%d\n", pid, retime, rutime, stime);
+  }
   }
   exit();
 }
diff --git a/syscall.c b/syscall.c
index ee85261..a25025a 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,8 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_history(void);
+extern int sys_wait2(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +128,8 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_history] sys_history,
+[SYS_wait2]   sys_wait2,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..240bfeb 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_history  22
+#define SYS_wait2  23
\ No newline at end of file
diff --git a/sysfile.c b/sysfile.c
index bfe61b7..f0dafbf 100644
--- a/sysfile.c
+++ b/sysfile.c
@@ -15,7 +15,7 @@
 #include "sleeplock.h"
 #include "file.h"
 #include "fcntl.h"
-
+#include "console.h"
 // Fetch the nth word-sized system call argument as a file descriptor
 // and return both the descriptor and the corresponding struct file.
 static int
diff --git a/sysproc.c b/sysproc.c
index 0686d29..388c596 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -89,3 +89,22 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+int sys_history(void) {
+  char *buffer;
+  int historyId;
+  argptr(0, &buffer, 1);
+  argint(1, &historyId);
+  return history(buffer, historyId);
+}
+int sys_wait2(void) {
+  int *retime, *rutime, *stime;
+  if (argptr(0, (void*)&retime, sizeof(retime)) < 0)
+    return -1;
+  if (argptr(1, (void*)&rutime, sizeof(retime)) < 0)
+    return -1;
+  if (argptr(2, (void*)&stime, sizeof(stime)) < 0)
+    return -1;
+  return wait2(retime, rutime, stime);
+}
diff --git a/trap.c b/trap.c
index 41c66eb..f1c7c47 100644
--- a/trap.c
+++ b/trap.c
@@ -51,6 +51,7 @@ trap(struct trapframe *tf)
     if(cpuid() == 0){
       acquire(&tickslock);
       ticks++;
+      updatestatistics();
       wakeup(&ticks);
       release(&tickslock);
     }
diff --git a/types.h b/types.h
index e4adf64..31c6c89 100644
--- a/types.h
+++ b/types.h
@@ -2,3 +2,6 @@ typedef unsigned int   uint;
 typedef unsigned short ushort;
 typedef unsigned char  uchar;
 typedef uint pde_t;
+
+#define INPUT_BUF 128
+#define MAX_HISTORY 16
\ No newline at end of file
diff --git a/ulib.c b/ulib.c
index 8e1e1a2..0122f9a 100644
--- a/ulib.c
+++ b/ulib.c
@@ -55,7 +55,7 @@ gets(char *buf, int max)
   int i, cc;
   char c;
 
-  for(i=0; i+1 < max; ){
+  for(i=0; i < max; ){
     cc = read(0, &c, 1);
     if(cc < 1)
       break;
@@ -63,7 +63,10 @@ gets(char *buf, int max)
     if(c == '\n' || c == '\r')
       break;
   }
-  buf[i] = '\0';
+    if (i < max - 1)
+    buf[i] = '\0';
+  else
+    buf[max - 1] = '\0';
   return buf;
 }
 
diff --git a/user.h b/user.h
index 4f99c52..e5d7a15 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int history(char*, int);
+int wait2(int*, int*, int*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..dbd0221 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,5 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(history)
+SYSCALL(wait2)	
\ No newline at end of file
